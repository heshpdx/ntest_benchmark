// Copyright Vlad Petric
//  All Rights Reserved
// This file is distributed subject to GNU GPL version 3. See the files
// GPLv3.txt and License.txt in the instructions subdirectory for details.

// This test checks the evaluator against 40 positions. The evaluation
// result is compared against the known value. This is a golden value
// test, against the JA set of coefficients.

#include <inttypes.h>
#include "core/BitBoard.h"
#include "Evaluator.h"
#include "n64/flips.h"
#include "n64/test.h"

// The following array was generated by randomEvalGen
struct evaltest {
    uint64_t mover;
    uint64_t empty;
    bool blackMove;
    int16_t expectedEval;
} evalInstances[40] = {
{0x100a1028140010, 0xefefe0c7c3e3efef, true, -81} /* 15 moves */,
{0x2814aa540a1408, 0xf7c7e10181a0e3e7, false, 82} /* 28 moves */,
{0x2854aa542a040800, 0x93030003c0d3f7f7, true, 1546} /* 31 moves */,
{0x100010a8152a0408, 0xefefe703c080f3f7, false, 464} /* 22 moves */,
{0xa1028100800, 0xffffe1c7c7c7f7f7, true, 98} /* 11 moves */,
{0x8000a14aa140810, 0xf7f7e0c101c1e7ef, true, 605} /* 23 moves */,
{0x100810aa102814, 0xefefe7c700c7c3e3, true, 277} /* 21 moves */,
{0x1428142000, 0xffffefe3c3c3dbdf, true, 37} /* 11 moves */,
{0x14aa15281000, 0xfffbc301c0c3cfff, false, 181} /* 20 moves */,
{0x1002152a542a1002, 0xefede0c00180cdfd, false, -569} /* 28 moves */,
{0x10085408040800, 0xefefe703e3f3f7f7, true, -391} /* 13 moves */,
{0x81028542a000800, 0xe7c7c701c1f7f7f7, true, 162} /* 19 moves */,
{0xa1028140000, 0xffffe1c787c3ffff, true, 168} /* 11 moves */,
{0x1028102814280000, 0xe7c7e7c7c3c3d7ff, false, 163} /* 16 moves */,
{0x1028142a50aa1000, 0xe7c7e3810700cfef, false, -487} /* 26 moves */,
{0x102a540a1000, 0xffffcf8081e5efef, false, -647} /* 16 moves */,
{0x281428142a1000, 0xffc3e3c3c381cfef, false, -263} /* 20 moves */,
{0x1408100a140a0008, 0xe1e7e7e0c1f5f7f7, false, 408} /* 18 moves */,
{0x8142a55aa1020, 0xf7e7e1c00001c7df, false, -24} /* 28 moves */,
{0x10aa502a100000, 0xefe7010781e7ffff, true, -82} /* 19 moves */,
{0x8102854aa44a000, 0xe3e7830301135fdf, true, -570} /* 27 moves */,
{0x1400142a15a81000, 0xebebc1c1c003e7ff, false, 148} /* 24 moves */,
{0x10a850aa152014, 0xefef038500c08beb, true, 621} /* 29 moves */,
{0x140814a815a81408, 0xe3e3c303e003c3e3, false, 91} /* 30 moves */,
{0x1008100a100800, 0xefe7e7c7e1e7f7ff, true, 125} /* 11 moves */,
{0x1020542a54200020, 0xefcf83c001cbdfdf, false, -446} /* 22 moves */,
{0x8552815281400, 0xf7f78083c0c7c3ef, false, -352} /* 24 moves */,
{0x10201528542850, 0xffefcfc083038707, true, -221} /* 25 moves */,
{0x14a014a855aa5088, 0x6b4b410300002767, false, -607} /* 38 moves */,
{0x542a54085000, 0xffeb8b8103a7afef, false, -1118} /* 20 moves */,
{0x20002552a140814, 0xfdfdf90080e3e3e1, true, 1402} /* 25 moves */,
{0x40a142a140010, 0xfbfbe0c380e3efef, true, 187} /* 19 moves */,
{0x102815001000, 0xffffef87c0efefef, false, -162} /* 10 moves */,
{0x102a5008540800, 0xffe7c087e383e7f7, true, -255} /* 19 moves */,
{0x142a14280000, 0xfffbeb80c3c7f7ff, false, -108} /* 14 moves */,
{0x10a05528552a54, 0xef6f0f00870080a1, true, 2270} /* 35 moves */,
{0x8142854284008, 0xf7e3c3c78383b7f7, false, -1254} /* 20 moves */,
{0x8500a54000000, 0xfff787e103efffff, false, -802} /* 12 moves */,
{0x81028150a040a, 0xfff7c7c3c0e0f3f1, false, -1530} /* 20 moves */,
{0x28042a54a81000, 0xffc3d3c00307efef, false, -461} /* 22 moves */};

void GoldenValueEvalTest() {
    CEvaluator *eval = CEvaluator::FindEvaluator('J', 'A');
    for (size_t i = 0; i < sizeof(evalInstances) / sizeof(struct evaltest); ++i) {
        const struct evaltest &e = evalInstances[i];
        CBitBoard b;
        b.mover = e.mover;
        b.empty = e.empty;
        u64 moveBits = mobility(b.mover, b.getEnemy());
        u64 enemyMoveBits = mobility(b.getEnemy(), b.mover);
        Pos2 pp;
        pp.Initialize(b, e.blackMove);
        TEST(e.expectedEval == eval->EvalMobs(pp, static_cast<u4>(bitCount(moveBits)), static_cast<u4>(bitCount(enemyMoveBits))));
    }
}
